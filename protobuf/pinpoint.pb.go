// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pinpoint.proto

package pinpoint

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	request "github.com/ubclaunchpad/pinpoint/protobuf/request"
	response "github.com/ubclaunchpad/pinpoint/protobuf/response"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Period               string   `protobuf:"bytes,2,opt,name=period,proto3" json:"period,omitempty"`
	Fields               []*Field `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbb17ad260bc57ce, []int{0}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Event) GetPeriod() string {
	if m != nil {
		return m.Period
	}
	return ""
}

func (m *Event) GetFields() []*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

type Field struct {
	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Required bool   `protobuf:"varint,2,opt,name=required,proto3" json:"required,omitempty"`
	// Types that are valid to be assigned to Properties:
	//	*Field_LongText
	//	*Field_ShortText
	Properties           isField_Properties `protobuf_oneof:"properties"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Field) Reset()         { *m = Field{} }
func (m *Field) String() string { return proto.CompactTextString(m) }
func (*Field) ProtoMessage()    {}
func (*Field) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbb17ad260bc57ce, []int{1}
}

func (m *Field) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Field.Unmarshal(m, b)
}
func (m *Field) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Field.Marshal(b, m, deterministic)
}
func (m *Field) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Field.Merge(m, src)
}
func (m *Field) XXX_Size() int {
	return xxx_messageInfo_Field.Size(m)
}
func (m *Field) XXX_DiscardUnknown() {
	xxx_messageInfo_Field.DiscardUnknown(m)
}

var xxx_messageInfo_Field proto.InternalMessageInfo

func (m *Field) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Field) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

type isField_Properties interface {
	isField_Properties()
}

type Field_LongText struct {
	LongText *LongText `protobuf:"bytes,3,opt,name=long_text,json=longText,proto3,oneof"`
}

type Field_ShortText struct {
	ShortText *ShortText `protobuf:"bytes,4,opt,name=short_text,json=shortText,proto3,oneof"`
}

func (*Field_LongText) isField_Properties() {}

func (*Field_ShortText) isField_Properties() {}

func (m *Field) GetProperties() isField_Properties {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *Field) GetLongText() *LongText {
	if x, ok := m.GetProperties().(*Field_LongText); ok {
		return x.LongText
	}
	return nil
}

func (m *Field) GetShortText() *ShortText {
	if x, ok := m.GetProperties().(*Field_ShortText); ok {
		return x.ShortText
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Field) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Field_OneofMarshaler, _Field_OneofUnmarshaler, _Field_OneofSizer, []interface{}{
		(*Field_LongText)(nil),
		(*Field_ShortText)(nil),
	}
}

func _Field_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Field)
	// properties
	switch x := m.Properties.(type) {
	case *Field_LongText:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LongText); err != nil {
			return err
		}
	case *Field_ShortText:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ShortText); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Field.Properties has unexpected type %T", x)
	}
	return nil
}

func _Field_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Field)
	switch tag {
	case 3: // properties.long_text
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LongText)
		err := b.DecodeMessage(msg)
		m.Properties = &Field_LongText{msg}
		return true, err
	case 4: // properties.short_text
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ShortText)
		err := b.DecodeMessage(msg)
		m.Properties = &Field_ShortText{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Field_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Field)
	// properties
	switch x := m.Properties.(type) {
	case *Field_LongText:
		s := proto.Size(x.LongText)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Field_ShortText:
		s := proto.Size(x.ShortText)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type LongText struct {
	ImLong               string   `protobuf:"bytes,1,opt,name=im_long,json=imLong,proto3" json:"im_long,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LongText) Reset()         { *m = LongText{} }
func (m *LongText) String() string { return proto.CompactTextString(m) }
func (*LongText) ProtoMessage()    {}
func (*LongText) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbb17ad260bc57ce, []int{2}
}

func (m *LongText) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LongText.Unmarshal(m, b)
}
func (m *LongText) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LongText.Marshal(b, m, deterministic)
}
func (m *LongText) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LongText.Merge(m, src)
}
func (m *LongText) XXX_Size() int {
	return xxx_messageInfo_LongText.Size(m)
}
func (m *LongText) XXX_DiscardUnknown() {
	xxx_messageInfo_LongText.DiscardUnknown(m)
}

var xxx_messageInfo_LongText proto.InternalMessageInfo

func (m *LongText) GetImLong() string {
	if m != nil {
		return m.ImLong
	}
	return ""
}

type ShortText struct {
	ImShort              string   `protobuf:"bytes,1,opt,name=im_short,json=imShort,proto3" json:"im_short,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShortText) Reset()         { *m = ShortText{} }
func (m *ShortText) String() string { return proto.CompactTextString(m) }
func (*ShortText) ProtoMessage()    {}
func (*ShortText) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbb17ad260bc57ce, []int{3}
}

func (m *ShortText) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShortText.Unmarshal(m, b)
}
func (m *ShortText) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShortText.Marshal(b, m, deterministic)
}
func (m *ShortText) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShortText.Merge(m, src)
}
func (m *ShortText) XXX_Size() int {
	return xxx_messageInfo_ShortText.Size(m)
}
func (m *ShortText) XXX_DiscardUnknown() {
	xxx_messageInfo_ShortText.DiscardUnknown(m)
}

var xxx_messageInfo_ShortText proto.InternalMessageInfo

func (m *ShortText) GetImShort() string {
	if m != nil {
		return m.ImShort
	}
	return ""
}

func init() {
	proto.RegisterType((*Event)(nil), "pinpoint.Event")
	proto.RegisterType((*Field)(nil), "pinpoint.Field")
	proto.RegisterType((*LongText)(nil), "pinpoint.LongText")
	proto.RegisterType((*ShortText)(nil), "pinpoint.ShortText")
}

func init() { proto.RegisterFile("pinpoint.proto", fileDescriptor_cbb17ad260bc57ce) }

var fileDescriptor_cbb17ad260bc57ce = []byte{
	// 404 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x8d, 0x1b, 0xc7, 0xb5, 0xa7, 0xd0, 0xc0, 0x20, 0x5a, 0xe3, 0x53, 0x64, 0x24, 0xc8, 0x01,
	0xb9, 0x10, 0x38, 0x72, 0x81, 0xaa, 0xd0, 0x43, 0xb9, 0xb8, 0x15, 0x27, 0xa4, 0xc8, 0x34, 0x53,
	0x77, 0x45, 0xbc, 0xbb, 0xec, 0x4e, 0x50, 0xfb, 0xa7, 0x38, 0xf0, 0x0b, 0x91, 0xd7, 0x5f, 0x41,
	0x0a, 0xa7, 0x9d, 0x79, 0xf3, 0xde, 0x9b, 0x27, 0xed, 0xc0, 0xa1, 0x16, 0x52, 0x2b, 0x21, 0x39,
	0xd3, 0x46, 0xb1, 0xc2, 0xb0, 0xeb, 0x93, 0xa7, 0x86, 0x7e, 0x6e, 0xc8, 0xf2, 0x49, 0xfb, 0x36,
	0x84, 0xe4, 0xd8, 0x90, 0xd5, 0x4a, 0x5a, 0x3a, 0xe9, 0x8a, 0x66, 0x90, 0x7e, 0x83, 0xc9, 0xd9,
	0x2f, 0x92, 0x8c, 0x08, 0xbe, 0x2c, 0x2a, 0x8a, 0xbd, 0x99, 0x37, 0x8f, 0x72, 0x57, 0xe3, 0x11,
	0x04, 0x9a, 0x8c, 0x50, 0xab, 0x78, 0xcf, 0xa1, 0x6d, 0x87, 0x2f, 0x21, 0xb8, 0x11, 0xb4, 0x5e,
	0xd9, 0x78, 0x3c, 0x1b, 0xcf, 0x0f, 0x16, 0xd3, 0xac, 0xcf, 0xf3, 0xa9, 0xc6, 0xf3, 0x76, 0x9c,
	0xfe, 0xf6, 0x60, 0xe2, 0x90, 0x9d, 0xf6, 0x09, 0x84, 0x75, 0x4a, 0x61, 0xa8, 0x59, 0x10, 0xe6,
	0x7d, 0x8f, 0x6f, 0x20, 0x5a, 0x2b, 0x59, 0x2e, 0x99, 0xee, 0x38, 0x1e, 0xcf, 0xbc, 0xf9, 0xc1,
	0x02, 0x87, 0x2d, 0x17, 0x4a, 0x96, 0x57, 0x74, 0xc7, 0xe7, 0xa3, 0x3c, 0x5c, 0xb7, 0x35, 0xbe,
	0x03, 0xb0, 0xb7, 0xca, 0x70, 0xa3, 0xf1, 0x9d, 0xe6, 0xc9, 0xa0, 0xb9, 0xac, 0x67, 0xad, 0x28,
	0xb2, 0x5d, 0xf3, 0xf1, 0x01, 0x80, 0x36, 0x4a, 0x93, 0x61, 0x41, 0x36, 0x7d, 0x0e, 0x61, 0xe7,
	0x8d, 0xc7, 0xb0, 0x2f, 0xaa, 0x65, 0x6d, 0xdf, 0xa6, 0x0e, 0x44, 0x55, 0x0f, 0xd3, 0x17, 0x10,
	0xf5, 0x66, 0xf8, 0x0c, 0x42, 0x51, 0x2d, 0x9d, 0x5f, 0x4b, 0xdb, 0x17, 0x95, 0x1b, 0x2f, 0xfe,
	0xec, 0x81, 0x7f, 0xaa, 0x0c, 0xe1, 0x6b, 0x88, 0x3e, 0x13, 0x5f, 0x72, 0xc1, 0x1b, 0x8b, 0xd3,
	0xac, 0xfb, 0x9a, 0x06, 0x48, 0x1e, 0x65, 0xfd, 0x9f, 0x34, 0x48, 0x3a, 0xc2, 0x0c, 0xa2, 0xf3,
	0x42, 0xae, 0xec, 0x6d, 0xf1, 0x83, 0xf0, 0xb0, 0x57, 0x9c, 0x55, 0x9a, 0xef, 0x93, 0xe9, 0x20,
	0x70, 0x40, 0x3a, 0xc2, 0xf7, 0xf0, 0xf0, 0xd4, 0x50, 0xc1, 0xf4, 0xe1, 0xfa, 0x5a, 0x6d, 0x24,
	0xe3, 0x51, 0xaf, 0xf9, 0x07, 0x4f, 0x1e, 0x0f, 0xda, 0x2f, 0x64, 0x6d, 0x51, 0x92, 0xdb, 0x16,
	0x7c, 0x25, 0x23, 0x6e, 0xee, 0xb7, 0xc2, 0x35, 0xc0, 0x6e, 0xfe, 0x2b, 0x98, 0x5c, 0xa8, 0x52,
	0xc8, 0xad, 0x64, 0xae, 0xff, 0x1f, 0xdb, 0xbf, 0x22, 0xcb, 0xb8, 0x75, 0x25, 0xee, 0xe4, 0x76,
	0xb2, 0xbf, 0x07, 0xee, 0x2e, 0xdf, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xec, 0xa1, 0x42, 0xfb,
	0xe3, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CoreClient is the client API for Core service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CoreClient interface {
	GetStatus(ctx context.Context, in *request.Status, opts ...grpc.CallOption) (*response.Status, error)
	Handshake(ctx context.Context, in *request.Empty, opts ...grpc.CallOption) (*response.Empty, error)
	CreateAccount(ctx context.Context, in *request.CreateAccount, opts ...grpc.CallOption) (*response.Message, error)
	Verify(ctx context.Context, in *request.Verify, opts ...grpc.CallOption) (*response.Message, error)
	Login(ctx context.Context, in *request.Login, opts ...grpc.CallOption) (*response.Message, error)
	// Test is a demo endpoint
	Test(ctx context.Context, in *Event, opts ...grpc.CallOption) (*response.Message, error)
}

type coreClient struct {
	cc *grpc.ClientConn
}

func NewCoreClient(cc *grpc.ClientConn) CoreClient {
	return &coreClient{cc}
}

func (c *coreClient) GetStatus(ctx context.Context, in *request.Status, opts ...grpc.CallOption) (*response.Status, error) {
	out := new(response.Status)
	err := c.cc.Invoke(ctx, "/pinpoint.Core/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) Handshake(ctx context.Context, in *request.Empty, opts ...grpc.CallOption) (*response.Empty, error) {
	out := new(response.Empty)
	err := c.cc.Invoke(ctx, "/pinpoint.Core/Handshake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CreateAccount(ctx context.Context, in *request.CreateAccount, opts ...grpc.CallOption) (*response.Message, error) {
	out := new(response.Message)
	err := c.cc.Invoke(ctx, "/pinpoint.Core/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) Verify(ctx context.Context, in *request.Verify, opts ...grpc.CallOption) (*response.Message, error) {
	out := new(response.Message)
	err := c.cc.Invoke(ctx, "/pinpoint.Core/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) Login(ctx context.Context, in *request.Login, opts ...grpc.CallOption) (*response.Message, error) {
	out := new(response.Message)
	err := c.cc.Invoke(ctx, "/pinpoint.Core/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) Test(ctx context.Context, in *Event, opts ...grpc.CallOption) (*response.Message, error) {
	out := new(response.Message)
	err := c.cc.Invoke(ctx, "/pinpoint.Core/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreServer is the server API for Core service.
type CoreServer interface {
	GetStatus(context.Context, *request.Status) (*response.Status, error)
	Handshake(context.Context, *request.Empty) (*response.Empty, error)
	CreateAccount(context.Context, *request.CreateAccount) (*response.Message, error)
	Verify(context.Context, *request.Verify) (*response.Message, error)
	Login(context.Context, *request.Login) (*response.Message, error)
	// Test is a demo endpoint
	Test(context.Context, *Event) (*response.Message, error)
}

func RegisterCoreServer(s *grpc.Server, srv CoreServer) {
	s.RegisterService(&_Core_serviceDesc, srv)
}

func _Core_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Status)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinpoint.Core/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetStatus(ctx, req.(*request.Status))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_Handshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).Handshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinpoint.Core/Handshake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).Handshake(ctx, req.(*request.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinpoint.Core/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CreateAccount(ctx, req.(*request.CreateAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Verify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinpoint.Core/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).Verify(ctx, req.(*request.Verify))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Login)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinpoint.Core/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).Login(ctx, req.(*request.Login))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinpoint.Core/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).Test(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

var _Core_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pinpoint.Core",
	HandlerType: (*CoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _Core_GetStatus_Handler,
		},
		{
			MethodName: "Handshake",
			Handler:    _Core_Handshake_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _Core_CreateAccount_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _Core_Verify_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Core_Login_Handler,
		},
		{
			MethodName: "Test",
			Handler:    _Core_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pinpoint.proto",
}
