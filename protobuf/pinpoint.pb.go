// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pinpoint.proto

package pinpoint

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/ubclaunchpad/pinpoint/protobuf/models"
import request "github.com/ubclaunchpad/pinpoint/protobuf/request"
import response "github.com/ubclaunchpad/pinpoint/protobuf/response"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CoreClient is the client API for Core service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CoreClient interface {
	GetStatus(ctx context.Context, in *request.Status, opts ...grpc.CallOption) (*response.Status, error)
	Handshake(ctx context.Context, in *request.Empty, opts ...grpc.CallOption) (*response.Empty, error)
	// clubs
	CreateClub(ctx context.Context, in *request.CreateClub, opts ...grpc.CallOption) (*response.Message, error)
	CreateEvent(ctx context.Context, in *request.CreateEvent, opts ...grpc.CallOption) (*response.Message, error)
	// users
	CreateAccount(ctx context.Context, in *request.CreateAccount, opts ...grpc.CallOption) (*response.Message, error)
	Verify(ctx context.Context, in *request.Verify, opts ...grpc.CallOption) (*response.Message, error)
	Login(ctx context.Context, in *request.Login, opts ...grpc.CallOption) (*response.Message, error)
}

type coreClient struct {
	cc *grpc.ClientConn
}

func NewCoreClient(cc *grpc.ClientConn) CoreClient {
	return &coreClient{cc}
}

func (c *coreClient) GetStatus(ctx context.Context, in *request.Status, opts ...grpc.CallOption) (*response.Status, error) {
	out := new(response.Status)
	err := c.cc.Invoke(ctx, "/pinpoint.Core/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) Handshake(ctx context.Context, in *request.Empty, opts ...grpc.CallOption) (*response.Empty, error) {
	out := new(response.Empty)
	err := c.cc.Invoke(ctx, "/pinpoint.Core/Handshake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CreateClub(ctx context.Context, in *request.CreateClub, opts ...grpc.CallOption) (*response.Message, error) {
	out := new(response.Message)
	err := c.cc.Invoke(ctx, "/pinpoint.Core/CreateClub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CreateEvent(ctx context.Context, in *request.CreateEvent, opts ...grpc.CallOption) (*response.Message, error) {
	out := new(response.Message)
	err := c.cc.Invoke(ctx, "/pinpoint.Core/CreateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CreateAccount(ctx context.Context, in *request.CreateAccount, opts ...grpc.CallOption) (*response.Message, error) {
	out := new(response.Message)
	err := c.cc.Invoke(ctx, "/pinpoint.Core/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) Verify(ctx context.Context, in *request.Verify, opts ...grpc.CallOption) (*response.Message, error) {
	out := new(response.Message)
	err := c.cc.Invoke(ctx, "/pinpoint.Core/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) Login(ctx context.Context, in *request.Login, opts ...grpc.CallOption) (*response.Message, error) {
	out := new(response.Message)
	err := c.cc.Invoke(ctx, "/pinpoint.Core/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreServer is the server API for Core service.
type CoreServer interface {
	GetStatus(context.Context, *request.Status) (*response.Status, error)
	Handshake(context.Context, *request.Empty) (*response.Empty, error)
	// clubs
	CreateClub(context.Context, *request.CreateClub) (*response.Message, error)
	CreateEvent(context.Context, *request.CreateEvent) (*response.Message, error)
	// users
	CreateAccount(context.Context, *request.CreateAccount) (*response.Message, error)
	Verify(context.Context, *request.Verify) (*response.Message, error)
	Login(context.Context, *request.Login) (*response.Message, error)
}

func RegisterCoreServer(s *grpc.Server, srv CoreServer) {
	s.RegisterService(&_Core_serviceDesc, srv)
}

func _Core_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Status)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinpoint.Core/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetStatus(ctx, req.(*request.Status))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_Handshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).Handshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinpoint.Core/Handshake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).Handshake(ctx, req.(*request.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CreateClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateClub)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CreateClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinpoint.Core/CreateClub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CreateClub(ctx, req.(*request.CreateClub))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinpoint.Core/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CreateEvent(ctx, req.(*request.CreateEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinpoint.Core/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CreateAccount(ctx, req.(*request.CreateAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Verify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinpoint.Core/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).Verify(ctx, req.(*request.Verify))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Login)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinpoint.Core/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).Login(ctx, req.(*request.Login))
	}
	return interceptor(ctx, in, info, handler)
}

var _Core_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pinpoint.Core",
	HandlerType: (*CoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _Core_GetStatus_Handler,
		},
		{
			MethodName: "Handshake",
			Handler:    _Core_Handshake_Handler,
		},
		{
			MethodName: "CreateClub",
			Handler:    _Core_CreateClub_Handler,
		},
		{
			MethodName: "CreateEvent",
			Handler:    _Core_CreateEvent_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _Core_CreateAccount_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _Core_Verify_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Core_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pinpoint.proto",
}

func init() { proto.RegisterFile("pinpoint.proto", fileDescriptor_pinpoint_74fb9334e22b67dc) }

var fileDescriptor_pinpoint_74fb9334e22b67dc = []byte{
	// 251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x3d, 0x4b, 0x03, 0x41,
	0x10, 0x86, 0x0f, 0xd1, 0x60, 0x46, 0x4c, 0x74, 0xe2, 0x07, 0x6c, 0x79, 0xb5, 0xec, 0x89, 0x82,
	0x58, 0xd8, 0xc8, 0x11, 0xb4, 0xd0, 0x4a, 0xb0, 0xdf, 0x24, 0x63, 0x3c, 0x4c, 0x76, 0xd7, 0xdd,
	0x39, 0x21, 0x7f, 0xdc, 0x3a, 0x70, 0x73, 0x1f, 0x21, 0x5c, 0x35, 0x3b, 0xcf, 0xbe, 0xcf, 0x14,
	0x2f, 0x8c, 0x7c, 0x61, 0xbd, 0x2b, 0x2c, 0x6b, 0x1f, 0x1c, 0x3b, 0x3c, 0x6e, 0x76, 0x75, 0x19,
	0xe8, 0xb7, 0xa4, 0xc8, 0x59, 0x3d, 0x25, 0xa0, 0xae, 0x03, 0x45, 0xef, 0x6c, 0xa4, 0xac, 0x79,
	0xd4, 0x1f, 0x93, 0xb5, 0x5b, 0xd0, 0x2a, 0x66, 0x32, 0x04, 0xde, 0xfd, 0x1f, 0xc0, 0x61, 0xee,
	0x02, 0xe1, 0x2d, 0x0c, 0x5f, 0x88, 0x3f, 0xd8, 0x70, 0x19, 0x71, 0xac, 0x9b, 0x9b, 0x02, 0xd4,
	0x99, 0x6e, 0x8f, 0x09, 0x49, 0x13, 0xd4, 0x30, 0x7c, 0x35, 0x76, 0x11, 0xbf, 0xcd, 0x0f, 0xe1,
	0xa8, 0x35, 0xa6, 0x6b, 0xcf, 0x1b, 0x35, 0xee, 0x84, 0x0a, 0xa4, 0x09, 0x3e, 0x00, 0xe4, 0x81,
	0x0c, 0x53, 0xbe, 0x2a, 0x67, 0x38, 0x69, 0x85, 0x0e, 0xaa, 0xf3, 0xce, 0x7a, 0xa7, 0x18, 0xcd,
	0x92, 0xd2, 0x04, 0x1f, 0xe1, 0x44, 0x22, 0xd3, 0x3f, 0xb2, 0x8c, 0x17, 0x7b, 0x62, 0x45, 0xfb,
	0xcd, 0x27, 0x38, 0x95, 0xcc, 0xf3, 0x7c, 0xee, 0x4a, 0xcb, 0x78, 0xb5, 0xe7, 0xd6, 0xbc, 0xdf,
	0xd6, 0x30, 0xf8, 0xa4, 0x50, 0x7c, 0x6d, 0x76, 0xea, 0x10, 0xd0, 0x9f, 0xbf, 0x81, 0xa3, 0x37,
	0xb7, 0x2c, 0xec, 0x4e, 0x17, 0xd5, 0xde, 0x9b, 0x9e, 0x0d, 0xaa, 0xfe, 0xef, 0xb7, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x7f, 0x6a, 0x2f, 0x92, 0xe0, 0x01, 0x00, 0x00,
}
