// Code generated by MockGen. DO NOT EDIT.
// Source: protobuf/pinpoint.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	request "github.com/ubclaunchpad/pinpoint/protobuf/request"
	response "github.com/ubclaunchpad/pinpoint/protobuf/response"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockCoreClient is a mock of CoreClient interface
type MockCoreClient struct {
	ctrl     *gomock.Controller
	recorder *MockCoreClientMockRecorder
}

// MockCoreClientMockRecorder is the mock recorder for MockCoreClient
type MockCoreClientMockRecorder struct {
	mock *MockCoreClient
}

// NewMockCoreClient creates a new mock instance
func NewMockCoreClient(ctrl *gomock.Controller) *MockCoreClient {
	mock := &MockCoreClient{ctrl: ctrl}
	mock.recorder = &MockCoreClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCoreClient) EXPECT() *MockCoreClientMockRecorder {
	return m.recorder
}

// GetStatus mocks base method
func (m *MockCoreClient) GetStatus(ctx context.Context, in *request.Status, opts ...grpc.CallOption) (*response.Status, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStatus", varargs...)
	ret0, _ := ret[0].(*response.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus
func (mr *MockCoreClientMockRecorder) GetStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockCoreClient)(nil).GetStatus), varargs...)
}

// CreateAccount mocks base method
func (m *MockCoreClient) CreateAccount(ctx context.Context, in *request.CreateAccount, opts ...grpc.CallOption) (*response.Status, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccount", varargs...)
	ret0, _ := ret[0].(*response.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount
func (mr *MockCoreClientMockRecorder) CreateAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockCoreClient)(nil).CreateAccount), varargs...)
}

// Verify mocks base method
func (m *MockCoreClient) Verify(ctx context.Context, in *request.Verify, opts ...grpc.CallOption) (*response.Status, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Verify", varargs...)
	ret0, _ := ret[0].(*response.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify
func (mr *MockCoreClientMockRecorder) Verify(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockCoreClient)(nil).Verify), varargs...)
}

// MockCoreServer is a mock of CoreServer interface
type MockCoreServer struct {
	ctrl     *gomock.Controller
	recorder *MockCoreServerMockRecorder
}

// MockCoreServerMockRecorder is the mock recorder for MockCoreServer
type MockCoreServerMockRecorder struct {
	mock *MockCoreServer
}

// NewMockCoreServer creates a new mock instance
func NewMockCoreServer(ctrl *gomock.Controller) *MockCoreServer {
	mock := &MockCoreServer{ctrl: ctrl}
	mock.recorder = &MockCoreServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCoreServer) EXPECT() *MockCoreServerMockRecorder {
	return m.recorder
}

// GetStatus mocks base method
func (m *MockCoreServer) GetStatus(arg0 context.Context, arg1 *request.Status) (*response.Status, error) {
	ret := m.ctrl.Call(m, "GetStatus", arg0, arg1)
	ret0, _ := ret[0].(*response.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus
func (mr *MockCoreServerMockRecorder) GetStatus(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockCoreServer)(nil).GetStatus), arg0, arg1)
}

// CreateAccount mocks base method
func (m *MockCoreServer) CreateAccount(arg0 context.Context, arg1 *request.CreateAccount) (*response.Status, error) {
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1)
	ret0, _ := ret[0].(*response.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount
func (mr *MockCoreServerMockRecorder) CreateAccount(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockCoreServer)(nil).CreateAccount), arg0, arg1)
}

// Verify mocks base method
func (m *MockCoreServer) Verify(arg0 context.Context, arg1 *request.Verify) (*response.Status, error) {
	ret := m.ctrl.Call(m, "Verify", arg0, arg1)
	ret0, _ := ret[0].(*response.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify
func (mr *MockCoreServerMockRecorder) Verify(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockCoreServer)(nil).Verify), arg0, arg1)
}
