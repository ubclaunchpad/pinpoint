VERSION=`git rev-parse --short HEAD`
DEV_ENV=export `less ./dev/.env | xargs`
TEST_COMPOSE=docker-compose -f dev/testenv.yml -p test
MON_COMPOSE=docker-compose -f dev/monitoring.yml -p monitoring

## all: Runs check
all: check

## check: Run simple checks
.PHONY: check
check:
	go vet ./...
	go test -run xxxx ./...

## deps: Install dependencies
.PHONY: deps
deps:
	bash .scripts/protoc-gen-go.sh
	go get -u github.com/maxbrunsfeld/counterfeiter
	go get -u github.com/vburenin/ifacemaker
	go get -u github.com/go-swagger/go-swagger/cmd/swagger
	dep ensure
	( cd client ; npm install )
	( cd frontend ; npm install )

## test: Execute tests
.PHONY: test
test:
	go test -race -cover ./...
	( cd frontend ; npm run test -- --coverage )
	( cd client ; npm run test )

## testenv: Set up test environment
.PHONY: testenv
testenv:
	mkdir -p tmp/data
	$(TEST_COMPOSE) up -d

## testenv-stop: Stop test environment
.PHONY: testenv-stop
testenv-stop:
	$(TEST_COMPOSE) stop

## monitoring: Set up monitoring environment
.PHONY: monitoring
monitoring:
	mkdir -p tmp/data
	$(MON_COMPOSE) up -d

## monitoring-stop: Stop monitoring environment
.PHONY: monitoring-stop
monitoring-stop:
	$(MON_COMPOSE) stop

## clean: Clean up stuff
.PHONY: clean
clean: testenv-stop monitoring-stop
	$(TEST_COMPOSE) rm -f -s -v
	$(MON_COMPOSE) rm -f -s -v
	rm -rf tmp

## lint: Run linters and checks
.PHONY: lint
lint: SHELL:=bash
lint: check
	diff -u <(echo -n) <(gofmt -d -s `find . -type f -name '*.go' -not -path "./vendor/*"`)
	diff -u <(echo -n) <(golint `go list ./... | grep -v /vendor/`)
	( cd frontend ; npm run lint )
	( cd client ; npm run lint )

## gen: Regenerate all generated code
.PHONY: gen
gen: proto mocks

## proto: Generate protobuf code from definitions
.PHONY: proto
proto:
	protoc -I protobuf pinpoint.proto --go_out=plugins=grpc:protobuf
	make proto-pkg PKG=models
	make proto-pkg PKG=request
	make proto-pkg PKG=response
	# generate mock
	counterfeiter -o ./protobuf/fakes/pinpoint.pb.go \
		./protobuf/pinpoint.pb.go CoreClient

## proto-pkg: Runs protoc definitions 
.PHONY: proto-pkg
proto-pkg:
	protoc -I protobuf $(PKG)/$(PKG).proto --go_out=plugins=grpc:$(GOPATH)/src

## mocks: Generate database interface and mock
.PHONY: mocks
mocks:
	ifacemaker \
		-f ./core/database/*.go \
		-s Database \
		-i DBClient \
		--pkg database \
		-o ./core/database/database.i.go \
		-c "Code generated by ifacemaker. DO NOT EDIT." \
		-y "DBClient wraps the AWS DynamoDB database API"
	counterfeiter -o ./core/database/mocks/database.i.go \
		./core/database/database.i.go DBClient

## core: Runs core service
.PHONY: core
core:
	go run core/main.go run --dev \
		--tls.cert dev/certs/127.0.0.1.crt \
		--tls.key dev/certs/127.0.0.1.key $(FLAGS)

## gateway: Runs API gateway
.PHONY: gateway
gateway:
	go run gateway/main.go run --dev \
		--core.cert dev/certs/127.0.0.1.crt $(FLAGS)

## gateway-tls: Runs gateway tls 
.PHONY: gateway-tls
gateway-tls:
	go run gateway/main.go run --dev \
		--core.cert dev/certs/127.0.0.1.crt \
		--tls.cert dev/certs/127.0.0.1.crt \
		--tls.key dev/certs/127.0.0.1.key $(FLAGS)

## web: Runs web app
.PHONY: web
web:
	( cd frontend ; npm start )

## pinpoint-core: Builds binary for pinpoint-core
.PHONY: pinpoint-core
pinpoint-core:
	go build -o ./bin/pinpoint-core \
    -ldflags "-X main.Version=$(VERSION)" \
    ./core $(FLAGS)

## pinpoint-gateway: Builds binary for pinpoint-gateway
.PHONY: pinpoint-gateway
pinpoint-gateway:
	go build -o ./bin/pinpoint-gateway \
    -ldflags "-X main.Version=$(VERSION)" \
    ./gateway $(FLAGS)

.PHONY: help
help: Makefile
	@echo " Choose a command run in pinpoint:"
	@sed -n 's/^##//p' $< | column -t -s ':' |  sed -e 's/^/ /'

.PHONY: swagger
## swagger: Generates API code from swagger tool 
swagger: 
	swagger generate server -t gen -f ./docs/swagger/swagger.yml -A pinpoint

.PHONY: api-docs
## api-docs: Serve the API UI - shows all api endpoints
api-docs: 
	swagger serve ./docs/swagger/swagger.yml
