// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/ubclaunchpad/pinpoint/core/database"
	"github.com/ubclaunchpad/pinpoint/protobuf/models"
)

type FakeDBClient struct {
	AddNewClubStub        func(*models.Club, *models.ClubUser) error
	addNewClubMutex       sync.RWMutex
	addNewClubArgsForCall []struct {
		arg1 *models.Club
		arg2 *models.ClubUser
	}
	addNewClubReturns struct {
		result1 error
	}
	addNewClubReturnsOnCall map[int]struct {
		result1 error
	}
	AddNewUserStub        func(*models.User, *models.EmailVerification) error
	addNewUserMutex       sync.RWMutex
	addNewUserArgsForCall []struct {
		arg1 *models.User
		arg2 *models.EmailVerification
	}
	addNewUserReturns struct {
		result1 error
	}
	addNewUserReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteClubStub        func(string) error
	deleteClubMutex       sync.RWMutex
	deleteClubArgsForCall []struct {
		arg1 string
	}
	deleteClubReturns struct {
		result1 error
	}
	deleteClubReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteUserStub        func(string) error
	deleteUserMutex       sync.RWMutex
	deleteUserArgsForCall []struct {
		arg1 string
	}
	deleteUserReturns struct {
		result1 error
	}
	deleteUserReturnsOnCall map[int]struct {
		result1 error
	}
	GetAllClubUsersStub        func(string) ([]*models.ClubUser, error)
	getAllClubUsersMutex       sync.RWMutex
	getAllClubUsersArgsForCall []struct {
		arg1 string
	}
	getAllClubUsersReturns struct {
		result1 []*models.ClubUser
		result2 error
	}
	getAllClubUsersReturnsOnCall map[int]struct {
		result1 []*models.ClubUser
		result2 error
	}
	GetClubStub        func(string) (*models.Club, error)
	getClubMutex       sync.RWMutex
	getClubArgsForCall []struct {
		arg1 string
	}
	getClubReturns struct {
		result1 *models.Club
		result2 error
	}
	getClubReturnsOnCall map[int]struct {
		result1 *models.Club
		result2 error
	}
	GetEmailVerificationStub        func(string, string) (*models.EmailVerification, error)
	getEmailVerificationMutex       sync.RWMutex
	getEmailVerificationArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getEmailVerificationReturns struct {
		result1 *models.EmailVerification
		result2 error
	}
	getEmailVerificationReturnsOnCall map[int]struct {
		result1 *models.EmailVerification
		result2 error
	}
	GetUserStub        func(string) (*models.User, error)
	getUserMutex       sync.RWMutex
	getUserArgsForCall []struct {
		arg1 string
	}
	getUserReturns struct {
		result1 *models.User
		result2 error
	}
	getUserReturnsOnCall map[int]struct {
		result1 *models.User
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDBClient) AddNewClub(arg1 *models.Club, arg2 *models.ClubUser) error {
	fake.addNewClubMutex.Lock()
	ret, specificReturn := fake.addNewClubReturnsOnCall[len(fake.addNewClubArgsForCall)]
	fake.addNewClubArgsForCall = append(fake.addNewClubArgsForCall, struct {
		arg1 *models.Club
		arg2 *models.ClubUser
	}{arg1, arg2})
	fake.recordInvocation("AddNewClub", []interface{}{arg1, arg2})
	fake.addNewClubMutex.Unlock()
	if fake.AddNewClubStub != nil {
		return fake.AddNewClubStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.addNewClubReturns
	return fakeReturns.result1
}

func (fake *FakeDBClient) AddNewClubCallCount() int {
	fake.addNewClubMutex.RLock()
	defer fake.addNewClubMutex.RUnlock()
	return len(fake.addNewClubArgsForCall)
}

func (fake *FakeDBClient) AddNewClubCalls(stub func(*models.Club, *models.ClubUser) error) {
	fake.addNewClubMutex.Lock()
	defer fake.addNewClubMutex.Unlock()
	fake.AddNewClubStub = stub
}

func (fake *FakeDBClient) AddNewClubArgsForCall(i int) (*models.Club, *models.ClubUser) {
	fake.addNewClubMutex.RLock()
	defer fake.addNewClubMutex.RUnlock()
	argsForCall := fake.addNewClubArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDBClient) AddNewClubReturns(result1 error) {
	fake.addNewClubMutex.Lock()
	defer fake.addNewClubMutex.Unlock()
	fake.AddNewClubStub = nil
	fake.addNewClubReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDBClient) AddNewClubReturnsOnCall(i int, result1 error) {
	fake.addNewClubMutex.Lock()
	defer fake.addNewClubMutex.Unlock()
	fake.AddNewClubStub = nil
	if fake.addNewClubReturnsOnCall == nil {
		fake.addNewClubReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addNewClubReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDBClient) AddNewUser(arg1 *models.User, arg2 *models.EmailVerification) error {
	fake.addNewUserMutex.Lock()
	ret, specificReturn := fake.addNewUserReturnsOnCall[len(fake.addNewUserArgsForCall)]
	fake.addNewUserArgsForCall = append(fake.addNewUserArgsForCall, struct {
		arg1 *models.User
		arg2 *models.EmailVerification
	}{arg1, arg2})
	fake.recordInvocation("AddNewUser", []interface{}{arg1, arg2})
	fake.addNewUserMutex.Unlock()
	if fake.AddNewUserStub != nil {
		return fake.AddNewUserStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.addNewUserReturns
	return fakeReturns.result1
}

func (fake *FakeDBClient) AddNewUserCallCount() int {
	fake.addNewUserMutex.RLock()
	defer fake.addNewUserMutex.RUnlock()
	return len(fake.addNewUserArgsForCall)
}

func (fake *FakeDBClient) AddNewUserCalls(stub func(*models.User, *models.EmailVerification) error) {
	fake.addNewUserMutex.Lock()
	defer fake.addNewUserMutex.Unlock()
	fake.AddNewUserStub = stub
}

func (fake *FakeDBClient) AddNewUserArgsForCall(i int) (*models.User, *models.EmailVerification) {
	fake.addNewUserMutex.RLock()
	defer fake.addNewUserMutex.RUnlock()
	argsForCall := fake.addNewUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDBClient) AddNewUserReturns(result1 error) {
	fake.addNewUserMutex.Lock()
	defer fake.addNewUserMutex.Unlock()
	fake.AddNewUserStub = nil
	fake.addNewUserReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDBClient) AddNewUserReturnsOnCall(i int, result1 error) {
	fake.addNewUserMutex.Lock()
	defer fake.addNewUserMutex.Unlock()
	fake.AddNewUserStub = nil
	if fake.addNewUserReturnsOnCall == nil {
		fake.addNewUserReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addNewUserReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDBClient) DeleteClub(arg1 string) error {
	fake.deleteClubMutex.Lock()
	ret, specificReturn := fake.deleteClubReturnsOnCall[len(fake.deleteClubArgsForCall)]
	fake.deleteClubArgsForCall = append(fake.deleteClubArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeleteClub", []interface{}{arg1})
	fake.deleteClubMutex.Unlock()
	if fake.DeleteClubStub != nil {
		return fake.DeleteClubStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteClubReturns
	return fakeReturns.result1
}

func (fake *FakeDBClient) DeleteClubCallCount() int {
	fake.deleteClubMutex.RLock()
	defer fake.deleteClubMutex.RUnlock()
	return len(fake.deleteClubArgsForCall)
}

func (fake *FakeDBClient) DeleteClubCalls(stub func(string) error) {
	fake.deleteClubMutex.Lock()
	defer fake.deleteClubMutex.Unlock()
	fake.DeleteClubStub = stub
}

func (fake *FakeDBClient) DeleteClubArgsForCall(i int) string {
	fake.deleteClubMutex.RLock()
	defer fake.deleteClubMutex.RUnlock()
	argsForCall := fake.deleteClubArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDBClient) DeleteClubReturns(result1 error) {
	fake.deleteClubMutex.Lock()
	defer fake.deleteClubMutex.Unlock()
	fake.DeleteClubStub = nil
	fake.deleteClubReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDBClient) DeleteClubReturnsOnCall(i int, result1 error) {
	fake.deleteClubMutex.Lock()
	defer fake.deleteClubMutex.Unlock()
	fake.DeleteClubStub = nil
	if fake.deleteClubReturnsOnCall == nil {
		fake.deleteClubReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteClubReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDBClient) DeleteUser(arg1 string) error {
	fake.deleteUserMutex.Lock()
	ret, specificReturn := fake.deleteUserReturnsOnCall[len(fake.deleteUserArgsForCall)]
	fake.deleteUserArgsForCall = append(fake.deleteUserArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeleteUser", []interface{}{arg1})
	fake.deleteUserMutex.Unlock()
	if fake.DeleteUserStub != nil {
		return fake.DeleteUserStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteUserReturns
	return fakeReturns.result1
}

func (fake *FakeDBClient) DeleteUserCallCount() int {
	fake.deleteUserMutex.RLock()
	defer fake.deleteUserMutex.RUnlock()
	return len(fake.deleteUserArgsForCall)
}

func (fake *FakeDBClient) DeleteUserCalls(stub func(string) error) {
	fake.deleteUserMutex.Lock()
	defer fake.deleteUserMutex.Unlock()
	fake.DeleteUserStub = stub
}

func (fake *FakeDBClient) DeleteUserArgsForCall(i int) string {
	fake.deleteUserMutex.RLock()
	defer fake.deleteUserMutex.RUnlock()
	argsForCall := fake.deleteUserArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDBClient) DeleteUserReturns(result1 error) {
	fake.deleteUserMutex.Lock()
	defer fake.deleteUserMutex.Unlock()
	fake.DeleteUserStub = nil
	fake.deleteUserReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDBClient) DeleteUserReturnsOnCall(i int, result1 error) {
	fake.deleteUserMutex.Lock()
	defer fake.deleteUserMutex.Unlock()
	fake.DeleteUserStub = nil
	if fake.deleteUserReturnsOnCall == nil {
		fake.deleteUserReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteUserReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDBClient) GetAllClubUsers(arg1 string) ([]*models.ClubUser, error) {
	fake.getAllClubUsersMutex.Lock()
	ret, specificReturn := fake.getAllClubUsersReturnsOnCall[len(fake.getAllClubUsersArgsForCall)]
	fake.getAllClubUsersArgsForCall = append(fake.getAllClubUsersArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetAllClubUsers", []interface{}{arg1})
	fake.getAllClubUsersMutex.Unlock()
	if fake.GetAllClubUsersStub != nil {
		return fake.GetAllClubUsersStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAllClubUsersReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDBClient) GetAllClubUsersCallCount() int {
	fake.getAllClubUsersMutex.RLock()
	defer fake.getAllClubUsersMutex.RUnlock()
	return len(fake.getAllClubUsersArgsForCall)
}

func (fake *FakeDBClient) GetAllClubUsersCalls(stub func(string) ([]*models.ClubUser, error)) {
	fake.getAllClubUsersMutex.Lock()
	defer fake.getAllClubUsersMutex.Unlock()
	fake.GetAllClubUsersStub = stub
}

func (fake *FakeDBClient) GetAllClubUsersArgsForCall(i int) string {
	fake.getAllClubUsersMutex.RLock()
	defer fake.getAllClubUsersMutex.RUnlock()
	argsForCall := fake.getAllClubUsersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDBClient) GetAllClubUsersReturns(result1 []*models.ClubUser, result2 error) {
	fake.getAllClubUsersMutex.Lock()
	defer fake.getAllClubUsersMutex.Unlock()
	fake.GetAllClubUsersStub = nil
	fake.getAllClubUsersReturns = struct {
		result1 []*models.ClubUser
		result2 error
	}{result1, result2}
}

func (fake *FakeDBClient) GetAllClubUsersReturnsOnCall(i int, result1 []*models.ClubUser, result2 error) {
	fake.getAllClubUsersMutex.Lock()
	defer fake.getAllClubUsersMutex.Unlock()
	fake.GetAllClubUsersStub = nil
	if fake.getAllClubUsersReturnsOnCall == nil {
		fake.getAllClubUsersReturnsOnCall = make(map[int]struct {
			result1 []*models.ClubUser
			result2 error
		})
	}
	fake.getAllClubUsersReturnsOnCall[i] = struct {
		result1 []*models.ClubUser
		result2 error
	}{result1, result2}
}

func (fake *FakeDBClient) GetClub(arg1 string) (*models.Club, error) {
	fake.getClubMutex.Lock()
	ret, specificReturn := fake.getClubReturnsOnCall[len(fake.getClubArgsForCall)]
	fake.getClubArgsForCall = append(fake.getClubArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetClub", []interface{}{arg1})
	fake.getClubMutex.Unlock()
	if fake.GetClubStub != nil {
		return fake.GetClubStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getClubReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDBClient) GetClubCallCount() int {
	fake.getClubMutex.RLock()
	defer fake.getClubMutex.RUnlock()
	return len(fake.getClubArgsForCall)
}

func (fake *FakeDBClient) GetClubCalls(stub func(string) (*models.Club, error)) {
	fake.getClubMutex.Lock()
	defer fake.getClubMutex.Unlock()
	fake.GetClubStub = stub
}

func (fake *FakeDBClient) GetClubArgsForCall(i int) string {
	fake.getClubMutex.RLock()
	defer fake.getClubMutex.RUnlock()
	argsForCall := fake.getClubArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDBClient) GetClubReturns(result1 *models.Club, result2 error) {
	fake.getClubMutex.Lock()
	defer fake.getClubMutex.Unlock()
	fake.GetClubStub = nil
	fake.getClubReturns = struct {
		result1 *models.Club
		result2 error
	}{result1, result2}
}

func (fake *FakeDBClient) GetClubReturnsOnCall(i int, result1 *models.Club, result2 error) {
	fake.getClubMutex.Lock()
	defer fake.getClubMutex.Unlock()
	fake.GetClubStub = nil
	if fake.getClubReturnsOnCall == nil {
		fake.getClubReturnsOnCall = make(map[int]struct {
			result1 *models.Club
			result2 error
		})
	}
	fake.getClubReturnsOnCall[i] = struct {
		result1 *models.Club
		result2 error
	}{result1, result2}
}

func (fake *FakeDBClient) GetEmailVerification(arg1 string, arg2 string) (*models.EmailVerification, error) {
	fake.getEmailVerificationMutex.Lock()
	ret, specificReturn := fake.getEmailVerificationReturnsOnCall[len(fake.getEmailVerificationArgsForCall)]
	fake.getEmailVerificationArgsForCall = append(fake.getEmailVerificationArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetEmailVerification", []interface{}{arg1, arg2})
	fake.getEmailVerificationMutex.Unlock()
	if fake.GetEmailVerificationStub != nil {
		return fake.GetEmailVerificationStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getEmailVerificationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDBClient) GetEmailVerificationCallCount() int {
	fake.getEmailVerificationMutex.RLock()
	defer fake.getEmailVerificationMutex.RUnlock()
	return len(fake.getEmailVerificationArgsForCall)
}

func (fake *FakeDBClient) GetEmailVerificationCalls(stub func(string, string) (*models.EmailVerification, error)) {
	fake.getEmailVerificationMutex.Lock()
	defer fake.getEmailVerificationMutex.Unlock()
	fake.GetEmailVerificationStub = stub
}

func (fake *FakeDBClient) GetEmailVerificationArgsForCall(i int) (string, string) {
	fake.getEmailVerificationMutex.RLock()
	defer fake.getEmailVerificationMutex.RUnlock()
	argsForCall := fake.getEmailVerificationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDBClient) GetEmailVerificationReturns(result1 *models.EmailVerification, result2 error) {
	fake.getEmailVerificationMutex.Lock()
	defer fake.getEmailVerificationMutex.Unlock()
	fake.GetEmailVerificationStub = nil
	fake.getEmailVerificationReturns = struct {
		result1 *models.EmailVerification
		result2 error
	}{result1, result2}
}

func (fake *FakeDBClient) GetEmailVerificationReturnsOnCall(i int, result1 *models.EmailVerification, result2 error) {
	fake.getEmailVerificationMutex.Lock()
	defer fake.getEmailVerificationMutex.Unlock()
	fake.GetEmailVerificationStub = nil
	if fake.getEmailVerificationReturnsOnCall == nil {
		fake.getEmailVerificationReturnsOnCall = make(map[int]struct {
			result1 *models.EmailVerification
			result2 error
		})
	}
	fake.getEmailVerificationReturnsOnCall[i] = struct {
		result1 *models.EmailVerification
		result2 error
	}{result1, result2}
}

func (fake *FakeDBClient) GetUser(arg1 string) (*models.User, error) {
	fake.getUserMutex.Lock()
	ret, specificReturn := fake.getUserReturnsOnCall[len(fake.getUserArgsForCall)]
	fake.getUserArgsForCall = append(fake.getUserArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetUser", []interface{}{arg1})
	fake.getUserMutex.Unlock()
	if fake.GetUserStub != nil {
		return fake.GetUserStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getUserReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDBClient) GetUserCallCount() int {
	fake.getUserMutex.RLock()
	defer fake.getUserMutex.RUnlock()
	return len(fake.getUserArgsForCall)
}

func (fake *FakeDBClient) GetUserCalls(stub func(string) (*models.User, error)) {
	fake.getUserMutex.Lock()
	defer fake.getUserMutex.Unlock()
	fake.GetUserStub = stub
}

func (fake *FakeDBClient) GetUserArgsForCall(i int) string {
	fake.getUserMutex.RLock()
	defer fake.getUserMutex.RUnlock()
	argsForCall := fake.getUserArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDBClient) GetUserReturns(result1 *models.User, result2 error) {
	fake.getUserMutex.Lock()
	defer fake.getUserMutex.Unlock()
	fake.GetUserStub = nil
	fake.getUserReturns = struct {
		result1 *models.User
		result2 error
	}{result1, result2}
}

func (fake *FakeDBClient) GetUserReturnsOnCall(i int, result1 *models.User, result2 error) {
	fake.getUserMutex.Lock()
	defer fake.getUserMutex.Unlock()
	fake.GetUserStub = nil
	if fake.getUserReturnsOnCall == nil {
		fake.getUserReturnsOnCall = make(map[int]struct {
			result1 *models.User
			result2 error
		})
	}
	fake.getUserReturnsOnCall[i] = struct {
		result1 *models.User
		result2 error
	}{result1, result2}
}

func (fake *FakeDBClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addNewClubMutex.RLock()
	defer fake.addNewClubMutex.RUnlock()
	fake.addNewUserMutex.RLock()
	defer fake.addNewUserMutex.RUnlock()
	fake.deleteClubMutex.RLock()
	defer fake.deleteClubMutex.RUnlock()
	fake.deleteUserMutex.RLock()
	defer fake.deleteUserMutex.RUnlock()
	fake.getAllClubUsersMutex.RLock()
	defer fake.getAllClubUsersMutex.RUnlock()
	fake.getClubMutex.RLock()
	defer fake.getClubMutex.RUnlock()
	fake.getEmailVerificationMutex.RLock()
	defer fake.getEmailVerificationMutex.RUnlock()
	fake.getUserMutex.RLock()
	defer fake.getUserMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDBClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ database.DBClient = new(FakeDBClient)
